<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Rémy Gardette</title>
 <link href="http://remyg.fr/" rel="self"/>
 <link href="http://remyg.fr"/>
 <updated>2013-05-31T16:29:33+01:00</updated>
 <id>http://remyg.fr</id>
 <author>
   <name>Rémy Gardette</name>
   <email>remy.gardette@gmail.com</email>
 </author>

 
 <entry>
   <title>Update Jekyll to version 1.0.2</title>
   <link href="http://remyg.fr/2013/05/14/update-jekyll-to-version-1-0-2"/>
   <updated>2013-05-14T18:00:00+01:00</updated>
   <id>http://remyg.fr/2013/05/14/update-jekyll-to-version-1-0-2</id>
   <content type="html">&lt;p&gt;Today, I&amp;#8217;ve updated my version of Jekyll from 0.12.1 to 1.0.2. I&amp;#8217;ll detail the procedure I followed to do it. Most of the commands have to be ran as root.&lt;/p&gt;

&lt;h2 id='clean_the_project'&gt;Clean the project&lt;/h2&gt;

&lt;p&gt;You will need to start by deleting the &lt;code&gt;Gemfile.lock&lt;/code&gt; file, so it can be re-generated with the correct version numbers.&lt;/p&gt;

&lt;h2 id='update_the_jekyll_gem'&gt;Update the Jekyll gem&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ gem update jekyll&lt;/code&gt;&lt;/pre&gt;
&lt;!-- more --&gt;
&lt;h2 id='update_the_kramdown_gem'&gt;Update the Kramdown gem&lt;/h2&gt;

&lt;p&gt;If you&amp;#8217;re using Kramdown as your markdown parser, you&amp;#8217;ll need to update it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem update kramdown&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='disable_jekyllpress'&gt;Disable jekyll-press&lt;/h2&gt;

&lt;p&gt;If you&amp;#8217;re using jekyll-press to compress the generated output files, this plugin doesn&amp;#8217;t seem to be compatible with Uglifier 2.0.1 (one of the gems used by it). When I tried to run a local instance of Jekyll, I got this error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;error: Invalid option: inline_script&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So you&amp;#8217;re going to have to disable it for now (I haven&amp;#8217;t found a solution yet). Edit your &lt;code&gt;Gemfile&lt;/code&gt; and remove (or comment) the line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &amp;#39;jekyll-press&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='retrieve_all_the_gem_dependencies'&gt;Retrieve all the gem dependencies&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ bundle&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='remove_the_automatic_regeneration_parameter'&gt;Remove the automatic re-generation parameter&lt;/h2&gt;

&lt;p&gt;In your &lt;code&gt;_config.yml&lt;/code&gt; file, remove (or comment) the line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;auto=&amp;quot;true&amp;quot; # or &amp;quot;false&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='run_jekyll'&gt;Run Jekyll&lt;/h2&gt;

&lt;p&gt;Now you should be able to run Jekyll. To launch a local instance, use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jekyll serve&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;instead of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jekyll --server&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run it with auto-regeneration, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jekyll serve --watch&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>RSS Reader v.0.2.0</title>
   <link href="http://remyg.fr/2013/05/08/rss-reader-v-0-2-0"/>
   <updated>2013-05-08T18:00:00+01:00</updated>
   <id>http://remyg.fr/2013/05/08/rss-reader-v-0-2-0</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ve continued working on my new project, &lt;a href='/projects/rss-reader'&gt;RSS Reader&lt;/a&gt;, which is now in &lt;a href='https://github.com/RemyG/RSSReader/commits/v0.2.0'&gt;version 0.2.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The new version brings the following changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mobile website: I&amp;#8217;ve created a mobile version of the website by using &lt;a href='http://jquerymobile.com'&gt;jQueryMobile&lt;/a&gt;. The mobile version can only be used as read-only (you can&amp;#8217;t add new feeds or make any change on the existing ones).&lt;/li&gt;

&lt;li&gt;sortable feeds list: by using the &lt;a href='http://api.jqueryui.com/sortable/'&gt;sortable widget&lt;/a&gt; from &lt;a href='http://jqueryui.com/'&gt;jQuery UI&lt;/a&gt;, you can now re-order your feeds, drag and drop them to another category&amp;#8230;&lt;/li&gt;

&lt;li&gt;when you decide to read an article as the original webpage in an iframe, or as the feed content, your choice is saved for the next times you open this feed.&lt;/li&gt;

&lt;li&gt;you can now navigate through entries with your keyboard (&amp;#8221;N&amp;#8221; for the next entry, &amp;#8220;P&amp;#8221; for the previous one).&lt;/li&gt;

&lt;li&gt;the application cleans old entries: each time the feeds are updated, it deletes old entries from the database: a maximum of 300 entries / 100 read entries is kept for each feed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The next functionalities I&amp;#8217;d like to implement are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;list the entries from a whole category&lt;/li&gt;

&lt;li&gt;more functionalities on the mobile website (mark as read, unread&amp;#8230;)&lt;/li&gt;

&lt;li&gt;edit an existing feed (change the feed link, the name&amp;#8230;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don&amp;#8217;t hesitate to download, test, fork, and comment on &lt;a href='https://github.com/RemyG/RSSReader'&gt;this project&lt;/a&gt;, which is released under the &lt;a href='http://opensource.org/licenses/MIT'&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>RSS Reader</title>
   <link href="http://remyg.fr/2013/04/15/rss-reader-a-self-hosted-rss-aggregator-and-reader"/>
   <updated>2013-04-15T00:00:00+01:00</updated>
   <id>http://remyg.fr/2013/04/15/rss-reader-a-self-hosted-rss-aggregator-and-reader</id>
   <content type="html">&lt;p&gt;A few weeks ago, Google announced they would stop their service &lt;a href='https://www.google.com/reader/'&gt;Google Reader&lt;/a&gt; on July 1, 2013 (&lt;a href='http://googleblog.blogspot.co.uk/2013/03/a-second-spring-of-cleaning.html'&gt;original post&lt;/a&gt;). I have never used this service to read my RSS feeds, prefering to use &lt;a href='https://www.netvibes.com/'&gt;Netvibes&lt;/a&gt;, mainly because it&amp;#8217;s been developed by a French company, but also because I like the UI better.&lt;/p&gt;

&lt;p&gt;But this announce has made me think. Every now and then, we hear about another service being shut down. Google, which regroups a huge part of the webapps used in the world, has his traditionnal Spring Cleaning. Other companies have closed worldwide-used websites. You can never know how long you&amp;#8217;ll be able to use a specific service.&lt;/p&gt;

&lt;p&gt;This is the reason I&amp;#8217;ve decided to develop my own RSS aggregator and reader, to allow me to take control over my personnal data.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;The project is named RSS Reader (not very original). It&amp;#8217;s a PHP based project, that you can deploy on a personnal server, or self-hosting service. It&amp;#8217;s released under the &lt;a href='http://www.opensource.org/licenses/MIT'&gt;MIT License&lt;/a&gt;. It uses 2 external libraries: &lt;a href='http://propelorm.org/'&gt;Propel ORM&lt;/a&gt; (an open source ORM for PHP5, released under the MIT License), and &lt;a href='http://simplepie.org/'&gt;SimplePie&lt;/a&gt; (an open source feed parser, released under the BSD License).&lt;/p&gt;

&lt;p&gt;The installation process is described on the project page &lt;a href='/projects/rss-reader'&gt;here&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Compress Jekyll website with jekyll-press</title>
   <link href="http://remyg.fr/2013/03/13/compress-jekyll-website-with-jekyll-press"/>
   <updated>2013-03-13T00:00:00+00:00</updated>
   <id>http://remyg.fr/2013/03/13/compress-jekyll-website-with-jekyll-press</id>
   <content type="html">&lt;p&gt;To compress your output files (from the &lt;code&gt;_site&lt;/code&gt; folder), you can use &lt;a href='https://github.com/stereobooster/jekyll-press'&gt;jekyll-press&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s very easy to install, configure and enable.&lt;/p&gt;

&lt;h2 id='install_g'&gt;Install g++&lt;/h2&gt;

&lt;p&gt;Install &lt;code&gt;build-essential&lt;/code&gt; and &lt;code&gt;g++&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install build-essential g++&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='install_the_bundler_gem'&gt;Install the bundler gem&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sudo gem install bundler&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='install_jekyllpress'&gt;Install jekyll-press&lt;/h2&gt;

&lt;p&gt;In the root folder of your Jekyll instance, create a file &lt;code&gt;Gemfile&lt;/code&gt;, and add this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source &amp;#39;https://rubygems.org&amp;#39;

gem &amp;#39;jekyll&amp;#39;
gem &amp;#39;execjs&amp;#39;
gem &amp;#39;therubyracer&amp;#39;
gem &amp;#39;jekyll-press&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then execute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='enable_jekyllpress'&gt;Enable jekyll-press&lt;/h2&gt;

&lt;p&gt;Create the following plugin in your project&amp;#8217;s &lt;code&gt;_plugins&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# _plugins/bundler.rb
require &amp;quot;rubygems&amp;quot;
require &amp;quot;bundler/setup&amp;quot;
Bundler.require(:default)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will automatically require all of the gems specified in your Gemfile.&lt;/p&gt;

&lt;h2 id='configure_jekyllpress'&gt;Configure jekyll-press&lt;/h2&gt;

&lt;p&gt;In your &lt;code&gt;_congif.yml&lt;/code&gt; file, add this block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jekyll-press:
  exclude: &amp;#39;atom.xml&amp;#39; # Exclude files from processing - file name, glob pattern or array of file names and glob patterns
  js_options: {}      # js minifier options
  css_options: {}     # css minifier options
  html_options: {}    # html minifier options&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='enjoy'&gt;Enjoy&lt;/h2&gt;

&lt;p&gt;Next time you rebuild your website, the output files will be compressed.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Install Jekyll on Ubuntu</title>
   <link href="http://remyg.fr/2013/03/09/install-jekyll-on-ubuntu"/>
   <updated>2013-03-09T00:00:00+00:00</updated>
   <id>http://remyg.fr/2013/03/09/install-jekyll-on-ubuntu</id>
   <content type="html">&lt;p&gt;Here are the easy steps to install and use Jekyll on Ubuntu. It&amp;#8217;s mainly based on &lt;a href='http://www.garron.me/bits/install-jekyll-on-ubuntu.html'&gt;this post&lt;/a&gt; by Guillermo Garron.&lt;/p&gt;

&lt;h2 id='install_ruby_dev'&gt;Install Ruby dev&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install ruby1.9.1-dev&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='install_jekyll'&gt;Install Jekyll&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sudo gem install jekyll&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='install_rake'&gt;Install Rake&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install rake&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;#8217;re now ready to blog!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Display GitHub repositories on Jekyll</title>
   <link href="http://remyg.fr/2013/03/08/display-github-repositories-on-jekyll"/>
   <updated>2013-03-08T00:00:00+00:00</updated>
   <id>http://remyg.fr/2013/03/08/display-github-repositories-on-jekyll</id>
   <content type="html">&lt;p&gt;This website is mostly meant to present my personnal work and projects, which are stored on GitHub. That&amp;#8217;s why I wanted to display the last GitHub repositories I&amp;#8217;ve worked on.&lt;/p&gt;

&lt;p&gt;To do that, I&amp;#8217;ve decided to use jQuery to make an AJAX call to the GitHub API, and display the result on my home page.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id='get_jquery'&gt;Get jQuery&lt;/h2&gt;

&lt;p&gt;Start by downloading the compressed version of jQuery (for me it was jquery-1.9.1.min.js) on &lt;a href='http://jquery.com/download/'&gt;the official site&lt;/a&gt;. Save the file in the directory &lt;code&gt;assets/themes/your_theme/js/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Include the script file in your default layout (&lt;code&gt;_includes/themes/your_theme/default.html&lt;/code&gt;). I always include the file in the head of the HTML:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...

{% for item in page.js %}
    {% if item == &amp;#39;jquery&amp;#39; %}
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;{{ ASSET_PATH }}/js/jquery-1.9.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    {% endif %}
{% endfor %}    

&amp;lt;/head&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The loop and condition allow me to only include the file when needed. I&amp;#8217;ll explain later how to trigger the include in a specific page.&lt;/p&gt;

&lt;h2 id='create_the_layout_used_to_display_the_repositories'&gt;Create the layout used to display the repositories&lt;/h2&gt;

&lt;p&gt;The layout is created as &lt;code&gt;_includes/JB/github&lt;/code&gt; (no extension).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% if site.github.user %}
    &amp;lt;section&amp;gt;
        &amp;lt;h2&amp;gt;On GitHub&amp;lt;/h2&amp;gt;
        &amp;lt;div id=&amp;quot;gh_repos&amp;quot;&amp;gt;
            &amp;lt;p&amp;gt;Status updating...&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        {% if site.github.show_profile_link %}
            &amp;lt;a href=&amp;quot;https://github.com/{{site.github.user}}&amp;quot;
                title=&amp;quot;Follow {{site.github.user}} on Github&amp;quot; id=&amp;quot;followGithub&amp;quot; class=&amp;quot;noBg&amp;quot;&amp;gt;
                &amp;lt;img src=&amp;quot;https://github.com/favicon.ico&amp;quot; /&amp;gt;
                &amp;lt;span&amp;gt;Follow me on Github&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        {% endif %}
    &amp;lt;/section&amp;gt;
{% endif %}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The configuration for &lt;code&gt;site.github.user&lt;/code&gt; and &lt;code&gt;site.github.show_profile_link&lt;/code&gt; will be put in &lt;code&gt;_config.yml&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id='make_the_ajax_call_and_display_the_results'&gt;Make the AJAX call and display the results&lt;/h2&gt;

&lt;p&gt;I want to display my repositories on my home page, which is &lt;code&gt;index.md&lt;/code&gt; for my configuration.&lt;/p&gt;

&lt;p&gt;First you have to enable the inclusion of jQuery for this page. So add this in the YAML Front Matter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;js: [jquery]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we have to include the layout &lt;code&gt;github&lt;/code&gt; we just wrote, where we want to display the list of repositories:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% include JB/github %}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it&amp;#8217;s time to write the AJAX call that will retrieve the list. I use jQuery to simplify the JS manipulation, but you can write all this in basic JS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
// &amp;lt;!--
    $.ajax({
        type: &amp;quot;GET&amp;quot;,
        url: &amp;#39;https://api.github.com/users/{{ site.github.user }}/repos?callback=?&amp;#39;,
        data: { type: &amp;quot;all&amp;quot;, sort: &amp;quot;pushed&amp;quot;, direction: &amp;quot;desc&amp;quot; },
        dataType: &amp;#39;json&amp;#39;,
        success: function(resp) {
            if (resp.data.length &amp;gt; 0) {
                $(&amp;#39;#gh_repos&amp;#39;).html(&amp;#39;&amp;lt;ul&amp;gt;&amp;lt;/ul&amp;gt;&amp;#39;);
                for(var i = 0; i &amp;lt; $(resp.data).length &amp;amp;&amp;amp; i &amp;lt; {{ site.github.repo_count }}; i++) 
                {
                   $(&amp;#39;#gh_repos &amp;gt; ul&amp;#39;).append(
                        &amp;#39;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;#39; + resp.data[i][&amp;#39;html_url&amp;#39;] + &amp;#39;&amp;quot;&amp;gt;&amp;#39;
                        + resp.data[i][&amp;#39;name&amp;#39;] + &amp;#39;&amp;lt;/a&amp;gt;&amp;#39;
                        + &amp;#39;&amp;lt;p&amp;gt;&amp;#39; 
                        + (resp.data[i][&amp;#39;description&amp;#39;] ? resp.data[i][&amp;#39;description&amp;#39;] : &amp;#39;(No description)&amp;#39;) 
                        + &amp;#39;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;#39;
                    );
                }
            }
            else {
                $(&amp;#39;#gh_repos&amp;#39;).html(&amp;#39;&amp;lt;p&amp;gt;No public repositories.&amp;lt;/p&amp;gt;&amp;#39;);
            }
        }
    });
// --&amp;gt;
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='configure_jekyll_to_retrieve_the_repositories'&gt;Configure Jekyll to retrieve the repositories&lt;/h2&gt;

&lt;p&gt;And then it&amp;#8217;s just a matter of configuring your GitHub information. In &lt;code&gt;_config.yml&lt;/code&gt;, just add:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;github:
  user: your_github_username
  repo_count: 5
  show_profile_link: true&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Auto-upload Jekyll after pushing to GitHub</title>
   <link href="http://remyg.fr/2013/03/05/auto-upload-jekyll-after-pushing-to-github"/>
   <updated>2013-03-05T18:30:00+00:00</updated>
   <id>http://remyg.fr/2013/03/05/auto-upload-jekyll-after-pushing-to-github</id>
   <content type="html">&lt;p&gt;My Jekyll site is hosted on a shared web hosting service, provided by OVH. It&amp;#8217;s the most basic service, which consists of a PHP server, a MySql database, and that&amp;#8217;s about it. The only way to change the files on the server is to access it via FTP, as there is no SSH connection available.&lt;/p&gt;

&lt;p&gt;So, with the concept of Jekyll, which is to generate static HTML files and use them for the final web site, the only option I had was to manually upload the &lt;code&gt;_site&lt;/code&gt; folder each time I made some changes in the source code. And this after pushing my changes to GitHub (the sources and generated files are stored in a public GitHub repository).&lt;/p&gt;

&lt;p&gt;But I&amp;#8217;ve actually found another way to automate the process. For this I need my personnal server, which is an old eeePc running Debian I have at home (but can&amp;#8217;t use as a web server, for basic QoS reasons).&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id='clone_the_git_repository'&gt;Clone the git repository&lt;/h2&gt;

&lt;p&gt;I started by cloning the repository on my personnal server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /home/username
$ mkdir jekyll
$ git clone https://github.com/RemyG/remyg.fr.git jekyll&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This create a clone of the repository in &lt;code&gt;/home/username/jekyll&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id='create_the_ftp_upload_script'&gt;Create the FTP upload script&lt;/h2&gt;

&lt;p&gt;To automatically upload my files via FTP, I used &lt;code&gt;lftp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install lftp&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I&amp;#8217;ve created the script used to upload my &lt;code&gt;_site&lt;/code&gt; folder to the shared server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch /usr/local/bin/ftp-upload-jekyll.sh
$ chmod +x /usr/local/bin/ftp-upload-jekyll.sh
$ vim /usr/local/bin/ftp-upload-jekyll.sh&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The content of the script is a simple &lt;code&gt;mirror&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

lftp -u your_username,your_password your_host_url &amp;lt;&amp;lt;EOF

cd /dest_folder/_site # The distant directory
lcd /home/username/jekyll/_site # The local directory

mirror -R

quit 0

EOF&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When this script is executed, it will upload the content of the local &lt;code&gt;_site&lt;/code&gt; folder on the host &lt;code&gt;your_host_url&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id='create_the_git_pull_script'&gt;Create the git pull script&lt;/h2&gt;

&lt;p&gt;Before uploading the website to the server, the repository has to be pulled. I&amp;#8217;ve created a script for it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch /usr/local/bin/github-pull-jekyll.sh
$ chmod +x /usr/local/bin/github-pull-jekyll.sh
$ vim /usr/local/bin/github-pull-jekyll.sh&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The content of the script is simply:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

cd /home/username/jekyll
git pull&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When this script is executed, it will pull the repository.&lt;/p&gt;

&lt;h2 id='create_a_github_postreceive_hook'&gt;Create a GitHub post-receive hook&lt;/h2&gt;

&lt;h3 id='on_my_personnal_server'&gt;On my personnal server&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;ve just created a PHP file, which is exposed on Internet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /var/www
$ vim github-hook.php&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The content of this file is very simple: first it pulls the repository, then it calls the script &lt;code&gt;ftp-upload-jekyll.sh&lt;/code&gt; to upload the content of the &lt;code&gt;_site&lt;/code&gt; folder to the shared server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    `sh /usr/local/bin/github-pull-jekyll.sh`;
    `sh /usr/local/bin/ftp-upload-jekyll.sh`;
?&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='on_github'&gt;On GitHub&lt;/h3&gt;

&lt;p&gt;Then I just had to create the post-receive hook on GitHub, as described on the &lt;a href='https://help.github.com/articles/post-receive-hooks'&gt;GitHub documentation&lt;/a&gt;. The WebHook URL is the URL of the PHP file on my personnal server.&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now, each time I push some changes to my GitHub repository, they are automatically uploaded to my web server, and instantly available to be browsed.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Use Flattr with Wordpress 3.5.1</title>
   <link href="http://remyg.fr/2013/03/05/use-flattr-with-wordpress-351"/>
   <updated>2013-03-05T18:00:00+00:00</updated>
   <id>http://remyg.fr/2013/03/05/use-flattr-with-wordpress-351</id>
   <content type="html">&lt;p&gt;&lt;a href='http://flattr.com/'&gt;Flattr&lt;/a&gt; is a &amp;#8220;social micro-payment system&amp;#8221;, that allows you to make online payments, when you like an article, a blog, a project&amp;#8230;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve decided to add it to my personnal websites, both the &lt;a href='http://remyg.fr'&gt;Jekyll site&lt;/a&gt; and my &lt;a href='http://blog.remyg.fr'&gt;Wordpress blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Looking at the &lt;a href='https://flattr.com/support/button'&gt;Flattr documentation&lt;/a&gt;, the basic solution for Wordpress.org blogs (hosted blogs) is to use the &lt;a href='https://wordpress.org/extend/plugins/flattr/'&gt;Flattr plugin&lt;/a&gt;. But the current version of the plugin (1.2.0) doesn&amp;#8217;t work with Wordpress 3.5.1. The Flattr button simply isn&amp;#8217;t displayed.&lt;/p&gt;

&lt;p&gt;So I&amp;#8217;ve had to find an alternate solution, which was to simply create a Wordpress function in my theme, and to call this function each time I want to add a Flattr button.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;I&amp;#8217;ve based my code on &lt;a href='http://wpengineer.com/2022/flattr-button-4-wordpress-without-a-plugin/'&gt;this post&lt;/a&gt;, but I&amp;#8217;ve simplified it, as I didn&amp;#8217;t need customization like multi-user handling.&lt;/p&gt;

&lt;p&gt;So the final function, as used on my blog, is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function fb_flattr_link($uid = &amp;#39;ramy&amp;#39;, $cat = &amp;#39;text&amp;#39;, $btn = &amp;#39;compact&amp;#39;) {

	$cat = htmlspecialchars($cat);
	$btn = htmlspecialchars($btn);

	$ftag = &amp;#39;&amp;#39;;
	$tags = get_the_tags( get_the_ID() );
	if ( $tags ) {
		foreach( $tags as $tag ) {
			$ftag .= $tag-&amp;gt;name . &amp;#39;, &amp;#39;;
		}
		$ftag = substr( $ftag, 0, -2 );
	} else {
		$tag = &amp;#39;&amp;#39;;
	}

	$dsc = htmlspecialchars( strip_tags( trim( get_the_excerpt() ) ) );
	$dsc = str_replace( &amp;quot;&amp;#39;&amp;quot;, &amp;quot;&amp;quot;, $dsc );
	$dsc = str_replace( &amp;quot;\n&amp;quot;, &amp;quot; &amp;quot;, $dsc ); // maybe \r\n
	$dsc = substr($dsc, 0, 150);

	$tle = htmlspecialchars( strip_tags( get_the_title() ) );
	$tle = str_replace( &amp;quot;&amp;#39;&amp;quot;, &amp;quot;&amp;quot;, $tle );

	$flattr = &amp;#39;
		&amp;lt;span class=&amp;quot;flattr&amp;quot;&amp;gt;
			&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
				var flattr_uid = &amp;quot;&amp;#39;.$uid.&amp;#39;&amp;quot;;
				var flattr_url = &amp;quot;&amp;#39; . get_permalink() . &amp;#39;&amp;quot;;
				var flattr_tle = &amp;quot;&amp;#39; . $tle . &amp;#39;&amp;quot;;
				var flattr_dsc = &amp;quot;&amp;#39; . $dsc . &amp;#39;&amp;quot;;
				var flattr_cat = &amp;quot;&amp;#39; . $cat . &amp;#39;&amp;quot;;
				var flattr_tag = &amp;quot;&amp;#39; . $ftag . &amp;#39;&amp;quot;;
				var flattr_btn = &amp;quot;&amp;#39; . $btn . &amp;#39;&amp;quot;;
			&amp;lt;/script&amp;gt;
			&amp;lt;script src=&amp;quot;http://api.flattr.com/button/load.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;/span&amp;gt;
	&amp;#39;;

	echo $flattr;

}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use it, I simply use this code each time I want to add a button:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php if ( function_exists(&amp;#39;fb_flattr_link&amp;#39;) ) fb_flattr_link(); ?&amp;gt;&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>RGResponsive</title>
   <link href="http://remyg.fr/2013/01/23/rgresponsive-a-responsive-wordpress-theme"/>
   <updated>2013-01-23T18:00:00+00:00</updated>
   <id>http://remyg.fr/2013/01/23/rgresponsive-a-responsive-wordpress-theme</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ve decided to create my own Wordpress theme, RGResponsive.&lt;/p&gt;

&lt;p&gt;You can find the sources for this theme &lt;a href='https://github.com/RemyG/wordpress-rgresponsive'&gt;on GitHub&lt;/a&gt;, and see it in action &lt;a href='http://blog.remyg.fr'&gt;on my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can follow the development and post comments &lt;a href='/projects/rgresponsive/'&gt;on this page&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>PFP</title>
   <link href="http://remyg.fr/2013/01/15/pfp-a-tiny-php-application-framework"/>
   <updated>2013-01-15T18:00:00+00:00</updated>
   <id>http://remyg.fr/2013/01/15/pfp-a-tiny-php-application-framework</id>
   <content type="html">&lt;p&gt;In my free time, I often work on small personal PHP projects. This allows me to keep in touch with the new technologies, frameworks,&amp;#8230; For instance, I&amp;#8217;ve recently started using Bootstrap to create well presented web-applications.&lt;/p&gt;

&lt;p&gt;My issue was that, each time I started a new project, I had to re-create the skeleton for the application. This basically meant copying an old project, remove everything specific, clean all the configuration values,&amp;#8230; before I could start working. That&amp;#8217;s why I decided to create an independant project, which I could use as a skeleton for almost all my PHP applications.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;But while looking at several existing solutions (Zend, CakePHP, FuelPHP,&amp;#8230;), I&amp;#8217;ve decided that these frameworks were way too heavy and complicated for my needs. I only needed a basic MVC skeleton. Then I found &lt;a href='http://gilbitron.github.com/PIP/'&gt;PIP&lt;/a&gt;, which is a tiny, lightweight MVC framework for LAMP stacks.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve forked the project as &lt;a href='https://github.com/RemyG/PFP'&gt;PFP&lt;/a&gt;, so I could alter it to match my needs. The main modification I&amp;#8217;ve made so far are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;converting all global variables to constants&lt;/li&gt;

&lt;li&gt;using PDO instead of the mysql functions&lt;/li&gt;

&lt;li&gt;creating a global header and footer for the whole application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these modifications, I&amp;#8217;ve got my generic application skeleton, that I can use for all my PHP website developments.&lt;/p&gt;

&lt;p&gt;You can find all the information about this project on &lt;a href='/projects/pfp'&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This project is released on GitHub &lt;a href='https://github.com/RemyG/PFP'&gt;here&lt;/a&gt; under an MIT license.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Custom PHP Scripts</title>
   <link href="http://remyg.fr/2012/12/27/custom-php-scripts-linkedin-resume"/>
   <updated>2012-12-27T18:00:00+00:00</updated>
   <id>http://remyg.fr/2012/12/27/custom-php-scripts-linkedin-resume</id>
   <content type="html">&lt;p&gt;Some time ago, I’ve decided to centralize my resume information in one place, to avoid having to update it on several places every time I changed anything in it.&lt;br /&gt;I’ve decided to use the LinkedIn interface to update it, as it allows resumes in different languages (my profile &lt;a href='http://www.linkedin.com/in/remygardette/fr'&gt;in French&lt;/a&gt; and &lt;a href='http://www.linkedin.com/in/remygardette/en'&gt;in English&lt;/a&gt;).&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;To retrieve my resume information from my LinkedIn profile, I’ve created a PHP script to scrape the webpage and compile the result in an XML file.&lt;/p&gt;

&lt;p&gt;The resulting file has the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;resume&amp;gt;
    &amp;lt;position&amp;gt;
	&amp;lt;title&amp;gt;position title&amp;lt;/title&amp;gt;
	&amp;lt;company&amp;gt;company&amp;lt;/company&amp;gt;
	&amp;lt;location&amp;gt;location&amp;lt;/location&amp;gt;
	&amp;lt;from&amp;gt;from date&amp;lt;/from&amp;gt;
	&amp;lt;to&amp;gt;to date&amp;lt;/to&amp;gt;
	&amp;lt;description&amp;gt;description&amp;lt;/description&amp;gt;
    &amp;lt;/position&amp;gt;
    &amp;lt;position&amp;gt;
	...
    &amp;lt;/position&amp;gt;
&amp;lt;/resume&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I can use this file as a source data in other webpages (like &lt;a href='http://remyg.fr/en'&gt;my personal homepage&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This script uses the &lt;a href='http://sourceforge.net/projects/simplehtmldom/'&gt;Simple HTML DOM library&lt;/a&gt; to parse the HTML source from the webpage.&lt;/p&gt;

&lt;p&gt;The script is in the &lt;code&gt;linkedin.php file&lt;/code&gt;, and needs the library in &lt;code&gt;simple_html_dom.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To run it, just call &lt;code&gt;scrapeResume($resume_url, $dest_file)&lt;/code&gt;, which will create or replace the file &lt;code&gt;$dest_file&lt;/code&gt; with the XML scraping of the resume at &lt;code&gt;$resume_xml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now I could create a custom and lightweight XML marshaller and unmarshaller, to simplify the XML operations.&lt;/p&gt;

&lt;p&gt;The sources can be found &lt;a href='https://github.com/RemyG/PHPScripts'&gt;on GitHub&lt;/a&gt;, and you can directly download the sources as a &lt;a href='https://github.com/RemyG/PHPScripts/zipball/master'&gt;Zip File&lt;/a&gt; or a &lt;a href='https://github.com/RemyG/PHPScripts/tarball/master'&gt;TAR Ball&lt;/a&gt;. You can also simply clone the repository with Git by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/RemyG/PHPScripts.git&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>New Blog With Octopress</title>
   <link href="http://remyg.fr/2012/12/21/new-blog-with-octopress"/>
   <updated>2012-12-21T18:00:00+00:00</updated>
   <id>http://remyg.fr/2012/12/21/new-blog-with-octopress</id>
   <content type="html">&lt;p&gt;Welcome on my new blog everybody!&lt;br /&gt;I’ve started it to present my current developments, which I release on GitHub as open-source projects.&lt;br /&gt;You can find my GitHub profile &lt;a href='https://github.com/RemyG'&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is an &lt;a href='http://www.octopress.org/'&gt;Octopress&lt;/a&gt; blog, deployed as a GitHub page.&lt;/p&gt;

&lt;p&gt;More news to come soon!&lt;/p&gt;</content>
 </entry>
 
 
</feed>